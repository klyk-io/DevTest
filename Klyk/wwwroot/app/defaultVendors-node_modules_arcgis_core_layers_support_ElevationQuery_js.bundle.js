"use strict";
(self["webpackChunkklyk"] = self["webpackChunkklyk"] || []).push([["defaultVendors-node_modules_arcgis_core_layers_support_ElevationQuery_js"],{

/***/ "./node_modules/@arcgis/core/layers/support/ElevationQuery.js":
/*!********************************************************************!*\
  !*** ./node_modules/@arcgis/core/layers/support/ElevationQuery.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ElevationQuery: () => (/* binding */ v),
/* harmony export */   GeometryDescriptor: () => (/* binding */ w),
/* harmony export */   getFinestLodIndex: () => (/* binding */ R)
/* harmony export */ });
/* harmony import */ var _core_asyncUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/asyncUtils.js */ "./node_modules/@arcgis/core/core/asyncUtils.js");
/* harmony import */ var _core_Error_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/Error.js */ "./node_modules/@arcgis/core/core/Error.js");
/* harmony import */ var _core_maybe_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/maybe.js */ "./node_modules/@arcgis/core/core/maybe.js");
/* harmony import */ var _core_promiseUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/promiseUtils.js */ "./node_modules/@arcgis/core/core/promiseUtils.js");
/* harmony import */ var _core_unitUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/unitUtils.js */ "./node_modules/@arcgis/core/core/unitUtils.js");
/* harmony import */ var _geometry_Multipoint_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../geometry/Multipoint.js */ "./node_modules/@arcgis/core/geometry/Multipoint.js");
/* harmony import */ var _geometry_Point_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../geometry/Point.js */ "./node_modules/@arcgis/core/geometry/Point.js");
/* harmony import */ var _geometry_Polyline_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../geometry/Polyline.js */ "./node_modules/@arcgis/core/geometry/Polyline.js");
/* harmony import */ var _geometry_projection_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../geometry/projection.js */ "./node_modules/@arcgis/core/geometry/projection.js");
/* harmony import */ var _geometry_support_aaBoundingRect_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../geometry/support/aaBoundingRect.js */ "./node_modules/@arcgis/core/geometry/support/aaBoundingRect.js");
/* harmony import */ var _ElevationSampler_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ElevationSampler.js */ "./node_modules/@arcgis/core/layers/support/ElevationSampler.js");
/* harmony import */ var _ElevationTile_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ElevationTile.js */ "./node_modules/@arcgis/core/layers/support/ElevationTile.js");
/* harmony import */ var _TileKey_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./TileKey.js */ "./node_modules/@arcgis/core/layers/support/TileKey.js");
/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
class v{async queryAll(e,i,n){if(!(e=n&&n.ignoreInvisibleLayers?e.filter((e=>e.visible)):e.slice()).length)throw new _core_Error_js__WEBPACK_IMPORTED_MODULE_1__["default"]("elevation-query:invalid-layer","Elevation queries require at least one elevation layer to fetch tiles from");const l=w.fromGeometry(i);let s=!1;n&&n.returnSampleInfo||(s=!0);const o={...q,...n,returnSampleInfo:!0},a=await this.query(e[e.length-1],l,o),r=await this._queryAllContinue(e,a,o);return r.geometry=r.geometry.export(),s&&delete r.sampleInfo,r}async query(e,i,n){if(!e)throw new _core_Error_js__WEBPACK_IMPORTED_MODULE_1__["default"]("elevation-query:invalid-layer","Elevation queries require an elevation layer to fetch tiles from");if(!i||!(i instanceof w)&&"point"!==i.type&&"multipoint"!==i.type&&"polyline"!==i.type)throw new _core_Error_js__WEBPACK_IMPORTED_MODULE_1__["default"]("elevation-query:invalid-geometry","Only point, polyline and multipoint geometries can be used to query elevation");const l={...q,...n},s=new _(e,i.spatialReference,l),o=l.signal;return await e.load({signal:o}),await this._createGeometryDescriptor(s,i,o),await this._selectTiles(s,o),await this._populateElevationTiles(s,o),this._sampleGeometryWithElevation(s),this._createQueryResult(s,o)}async createSampler(e,i,n){if(!e)throw new _core_Error_js__WEBPACK_IMPORTED_MODULE_1__["default"]("elevation-query:invalid-layer","Elevation queries require an elevation layer to fetch tiles from");if(!i||"extent"!==i.type)throw new _core_Error_js__WEBPACK_IMPORTED_MODULE_1__["default"]("elevation-query:invalid-extent","Invalid or undefined extent");const l={...q,...n};return this._createSampler(e,i,l)}async createSamplerAll(e,i,n){if(!(e=n&&n.ignoreInvisibleLayers?e.filter((e=>e.visible)):e.slice()).length)throw new _core_Error_js__WEBPACK_IMPORTED_MODULE_1__["default"]("elevation-query:invalid-layer","Elevation queries require at least one elevation layer to fetch tiles from");if(!i||"extent"!==i.type)throw new _core_Error_js__WEBPACK_IMPORTED_MODULE_1__["default"]("elevation-query:invalid-extent","Invalid or undefined extent");const l={...q,...n,returnSampleInfo:!0},s=await this._createSampler(e[e.length-1],i,l);return this._createSamplerAllContinue(e,i,s,l)}async _createSampler(e,t,i,n){const l=i.signal;await e.load({signal:l});const s=t.spatialReference,o=e.tileInfo.spatialReference;s.equals(o)||(await (0,_geometry_projection_js__WEBPACK_IMPORTED_MODULE_8__.initializeProjection)([{source:s,dest:o}],{signal:l}),t=(0,_geometry_projection_js__WEBPACK_IMPORTED_MODULE_8__.project)(t,o));const a=new E(e,t,i,n);return await this._selectTiles(a,l),await this._populateElevationTiles(a,l),new _ElevationSampler_js__WEBPACK_IMPORTED_MODULE_10__.MultiTileElevationSampler(a.elevationTiles,a.layer.tileInfo,a.options.noDataValue)}async _createSamplerAllContinue(e,t,i,n){if(e.pop(),!e.length)return i;const l=i.samplers.map((e=>(0,_geometry_support_aaBoundingRect_js__WEBPACK_IMPORTED_MODULE_9__.fromExtent)(e.extent))),s=await this._createSampler(e[e.length-1],t,n,l);if(0===s.samplers.length)return i;const o=i.samplers.concat(s.samplers),a=new _ElevationSampler_js__WEBPACK_IMPORTED_MODULE_10__.MultiTileElevationSampler(o,n.noDataValue);return this._createSamplerAllContinue(e,t,a,n)}async _queryAllContinue(e,t,n){const l=e.pop(),s=t.geometry.coordinates,o=t.sampleInfo;(0,_core_maybe_js__WEBPACK_IMPORTED_MODULE_2__.assertIsSome)(o);const a=[],r=[];for(let i=0;i<s.length;i++){const t=o[i];t.demResolution>=0?t.source||(t.source=l):e.length&&(a.push(s[i]),r.push(i))}if(!e.length||0===a.length)return t;const c=t.geometry.clone(a),u=await this.query(e[e.length-1],c,n),h=u.sampleInfo;if(!h)throw new Error("no sampleInfo");return r.forEach(((e,t)=>{s[e].z=u.geometry.coordinates[t].z,o[e].demResolution=h[t].demResolution})),this._queryAllContinue(e,t,n)}async _createQueryResult(e,t){const n=await e.geometry.project(e.outSpatialReference,t);(0,_core_maybe_js__WEBPACK_IMPORTED_MODULE_2__.assertIsSome)(n);const l={geometry:n.export(),noDataValue:e.options.noDataValue};return e.options.returnSampleInfo&&(l.sampleInfo=this._extractSampleInfo(e)),e.geometry.coordinates.forEach((e=>{e.tile=null,e.elevationTile=null})),l}async _createGeometryDescriptor(e,i,n){let l;const s=e.layer.tileInfo.spatialReference;if(i instanceof w?l=await i.project(s,n):(await (0,_geometry_projection_js__WEBPACK_IMPORTED_MODULE_8__.initializeProjection)([{source:i.spatialReference,dest:s}],{signal:n}),l=(0,_geometry_projection_js__WEBPACK_IMPORTED_MODULE_8__.project)(i,s)),!l)throw new _core_Error_js__WEBPACK_IMPORTED_MODULE_1__["default"]("elevation-query:spatial-reference-mismatch",`Cannot query elevation in '${i.spatialReference.wkid}' on an elevation service in '${s.wkid}'`);e.geometry=w.fromGeometry(l)}async _selectTiles(e,i){"geometry"===e.type&&this._preselectOutsideLayerExtent(e);const n=e.options.demResolution;if("number"==typeof n)this._selectTilesClosestResolution(e,n);else if("finest-contiguous"===n)await this._selectTilesFinestContiguous(e,i);else{if("auto"!==n)throw new _core_Error_js__WEBPACK_IMPORTED_MODULE_1__["default"]("elevation-query:invalid-dem-resolution",`Invalid dem resolution value '${n}', expected a number, "finest-contiguous" or "auto"`);await this._selectTilesAuto(e,i)}}_preselectOutsideLayerExtent(e){if(null==e.layer.fullExtent)return;const t=new _ElevationTile_js__WEBPACK_IMPORTED_MODULE_11__.ElevationTile(null);t.sample=()=>e.options.noDataValue,e.outsideExtentTile=t;const i=e.layer.fullExtent;e.geometry.coordinates.forEach((e=>{const n=e.x,l=e.y;(n<i.xmin||n>i.xmax||l<i.ymin||l>i.ymax)&&(e.elevationTile=t)}))}_selectTilesClosestResolution(e,t){const i=this._findNearestDemResolutionLODIndex(e,t);e.selectTilesAtLOD(i)}_findNearestDemResolutionLODIndex(e,t){const{tileInfo:i,tilemapCache:n}=e.layer,l=t/(0,_core_unitUtils_js__WEBPACK_IMPORTED_MODULE_4__.getMetersPerUnitForSR)(i.spatialReference),s=I(i,n);let a=s[0],r=0;for(let o=1;o<s.length;o++){const e=s[o];Math.abs(e.resolution-l)<Math.abs(a.resolution-l)&&(a=e,r=o)}return r}async _selectTilesFinestContiguous(e,t){const{tileInfo:i,tilemapCache:n}=e.layer,l=R(i,n,e.options.minDemResolution);await this._selectTilesFinestContiguousAt(e,l,t)}async _selectTilesFinestContiguousAt(e,i,s){const o=e.layer;if(e.selectTilesAtLOD(i),i<0)return;const a=o.tilemapCache,r=e.getTilesToFetch();try{if(a&&!A(a))await (0,_core_promiseUtils_js__WEBPACK_IMPORTED_MODULE_3__.whenOrAbort)(Promise.all(r.map((e=>a.fetchAvailability(e.level,e.row,e.col,{signal:s})))),s);else if(await this._populateElevationTiles(e,s),!e.allElevationTilesFetched())throw e.clearElevationTiles(),new _core_Error_js__WEBPACK_IMPORTED_MODULE_1__["default"]("elevation-query:has-unavailable-tiles")}catch(c){(0,_core_promiseUtils_js__WEBPACK_IMPORTED_MODULE_3__.throwIfAbortError)(c),await this._selectTilesFinestContiguousAt(e,i-1,s)}}async _populateElevationTiles(e,t){const i=e.getTilesToFetch(),l={},o=e.options.cache,a=e.options.noDataValue,r=i.map((async i=>{if(null==i.id)return;const n=`${e.layer.uid}:${i.id}:${a}`,s=null!=o?o.get(n):null,r=null!=s?s:await e.layer.fetchTile(i.level,i.row,i.col,{noDataValue:a,signal:t});null!=o&&o.put(n,r),l[i.id]=new _ElevationTile_js__WEBPACK_IMPORTED_MODULE_11__.ElevationTile(i,r)}));await (0,_core_promiseUtils_js__WEBPACK_IMPORTED_MODULE_3__.whenOrAbort)((0,_core_promiseUtils_js__WEBPACK_IMPORTED_MODULE_3__.eachAlways)(r),t),e.populateElevationTiles(l)}async _selectTilesAuto(t,i){this._selectTilesAutoFinest(t),this._reduceTilesForMaximumRequests(t);const s=t.layer.tilemapCache;if(!s||A(s))return this._selectTilesAutoPrefetchUpsample(t,i);const o=t.getTilesToFetch(),a={},r=o.map((async t=>{const n=new _TileKey_js__WEBPACK_IMPORTED_MODULE_12__.TileKey(null,0,0,0,(0,_geometry_support_aaBoundingRect_js__WEBPACK_IMPORTED_MODULE_9__.create)()),o=await (0,_core_asyncUtils_js__WEBPACK_IMPORTED_MODULE_0__.result)(s.fetchAvailabilityUpsample(t.level,t.row,t.col,n,{signal:i}));!1!==o.ok?null!=t.id&&(a[t.id]=n):(0,_core_promiseUtils_js__WEBPACK_IMPORTED_MODULE_3__.throwIfAbortError)(o.error)}));await (0,_core_promiseUtils_js__WEBPACK_IMPORTED_MODULE_3__.whenOrAbort)(Promise.all(r),i),t.remapTiles(a)}_reduceTilesForMaximumRequests(e){const t=e.layer.tileInfo;let i=0;const n={},l=e=>{null!=e.id&&(e.id in n?n[e.id]++:(n[e.id]=1,i++))},s=e=>{if(null==e.id)return;const t=n[e.id];1===t?(delete n[e.id],i--):n[e.id]=t-1};e.forEachTileToFetch(l,s);let o=!0;for(;o&&(o=!1,e.forEachTileToFetch((n=>{i<=e.options.maximumAutoTileRequests||(s(n),t.upsampleTile(n)&&(o=!0),l(n))}),s),o););}_selectTilesAutoFinest(e){const{tileInfo:t,tilemapCache:i}=e.layer,n=R(t,i,e.options.minDemResolution);e.selectTilesAtLOD(n,e.options.maximumAutoTileRequests)}async _selectTilesAutoPrefetchUpsample(e,t){const i=e.layer.tileInfo;await this._populateElevationTiles(e,t);let n=!1;e.forEachTileToFetch(((e,t)=>{i.upsampleTile(e)?n=!0:t()})),n&&await this._selectTilesAutoPrefetchUpsample(e,t)}_sampleGeometryWithElevation(e){e.geometry.coordinates.forEach((t=>{const i=t.elevationTile;let n=e.options.noDataValue;if(i){const e=i.sample(t.x,t.y);null!=e?n=e:t.elevationTile=null}t.z=n}))}_extractSampleInfo(e){const t=e.layer.tileInfo,i=(0,_core_unitUtils_js__WEBPACK_IMPORTED_MODULE_4__.getMetersPerUnitForSR)(t.spatialReference);return e.geometry.coordinates.map((n=>{let l=-1;if(n.elevationTile&&n.elevationTile!==e.outsideExtentTile){l=t.lodAt(n.elevationTile.tile.level).resolution*i}return{demResolution:l}}))}}class w{export(){return this._exporter(this.coordinates,this.spatialReference)}clone(e){const t=new w;return t.geometry=this.geometry,t.spatialReference=this.spatialReference,t.coordinates=e||this.coordinates.map((e=>e.clone())),t._exporter=this._exporter,t}async project(e,t){if(this.spatialReference.equals(e))return this.clone();await (0,_geometry_projection_js__WEBPACK_IMPORTED_MODULE_8__.initializeProjection)([{source:this.spatialReference,dest:e}],{signal:t});const i=new _geometry_Multipoint_js__WEBPACK_IMPORTED_MODULE_5__["default"]({spatialReference:this.spatialReference,points:this.coordinates.map((e=>[e.x,e.y]))}),n=(0,_geometry_projection_js__WEBPACK_IMPORTED_MODULE_8__.project)(i,e);if(!n)return null;const l=this.coordinates.map(((e,t)=>{const i=e.clone(),l=n.points[t];return i.x=l[0],i.y=l[1],i})),s=this.clone(l);return s.spatialReference=e,s}static fromGeometry(e){const t=new w;if(t.geometry=e,t.spatialReference=e.spatialReference,e instanceof w)t.coordinates=e.coordinates.map((e=>e.clone())),t._exporter=(t,i)=>{const n=e.clone(t);return n.spatialReference=i,n};else switch(e.type){case"point":{const i=e,{hasZ:n,hasM:l}=i;t.coordinates=n&&l?[new g(i.x,i.y,i.z,i.m)]:n?[new g(i.x,i.y,i.z)]:l?[new g(i.x,i.y,null,i.m)]:[new g(i.x,i.y)],t._exporter=(t,i)=>e.hasM?new _geometry_Point_js__WEBPACK_IMPORTED_MODULE_6__["default"](t[0].x,t[0].y,t[0].z,t[0].m,i):new _geometry_Point_js__WEBPACK_IMPORTED_MODULE_6__["default"](t[0].x,t[0].y,t[0].z,i);break}case"multipoint":{const i=e,{hasZ:n,hasM:l}=i;t.coordinates=n&&l?i.points.map((e=>new g(e[0],e[1],e[2],e[3]))):n?i.points.map((e=>new g(e[0],e[1],e[2]))):l?i.points.map((e=>new g(e[0],e[1],null,e[2]))):i.points.map((e=>new g(e[0],e[1]))),t._exporter=(t,i)=>e.hasM?new _geometry_Multipoint_js__WEBPACK_IMPORTED_MODULE_5__["default"]({points:t.map((e=>[e.x,e.y,e.z,e.m])),hasZ:!0,hasM:!0,spatiaReference:i}):new _geometry_Multipoint_js__WEBPACK_IMPORTED_MODULE_5__["default"](t.map((e=>[e.x,e.y,e.z])),i);break}case"polyline":{const i=e,n=[],l=[],{hasZ:s,hasM:o}=e;let a=0;for(const e of i.paths)if(l.push([a,a+e.length]),a+=e.length,s&&o)for(const t of e)n.push(new g(t[0],t[1],t[2],t[3]));else if(s)for(const t of e)n.push(new g(t[0],t[1],t[2]));else if(o)for(const t of e)n.push(new g(t[0],t[1],null,t[2]));else for(const t of e)n.push(new g(t[0],t[1]));t.coordinates=n,t._exporter=(t,i)=>{const n=e.hasM?t.map((e=>[e.x,e.y,e.z,e.m])):t.map((e=>[e.x,e.y,e.z])),s=l.map((e=>n.slice(e[0],e[1])));return new _geometry_Polyline_js__WEBPACK_IMPORTED_MODULE_7__["default"]({paths:s,hasM:e.hasM,hasZ:!0,spatialReference:i})};break}}return t}}class g{constructor(e,t,i=null,n=null,l=null,s=null){this.x=e,this.y=t,this.z=i,this.m=n,this.tile=l,this.elevationTile=s}clone(){return new g(this.x,this.y,this.z,this.m)}}class x{constructor(e,t){this.layer=e,this.options=t}}class _ extends x{constructor(e,t,i){super(e,i),this.outSpatialReference=t,this.type="geometry"}selectTilesAtLOD(e){if(e<0)this.geometry.coordinates.forEach((e=>e.tile=null));else{const{tileInfo:t,tilemapCache:i}=this.layer,n=I(t,i)[e].level;this.geometry.coordinates.forEach((e=>e.tile=t.tileAt(n,e.x,e.y)))}}allElevationTilesFetched(){return!this.geometry.coordinates.some((e=>!e.elevationTile))}clearElevationTiles(){for(const e of this.geometry.coordinates)e.elevationTile!==this.outsideExtentTile&&(e.elevationTile=null)}populateElevationTiles(e){for(const t of this.geometry.coordinates)!t.elevationTile&&t.tile?.id&&(t.elevationTile=e[t.tile.id])}remapTiles(e){for(const t of this.geometry.coordinates){const i=t.tile?.id;t.tile=i?e[i]:null}}getTilesToFetch(){const e={},t=[];for(const i of this.geometry.coordinates){const n=i.tile;if(!n)continue;const l=i.tile?.id;i.elevationTile||!l||e[l]||(e[l]=n,t.push(n))}return t}forEachTileToFetch(e){for(const t of this.geometry.coordinates)t.tile&&!t.elevationTile&&e(t.tile,(()=>{t.tile=null}))}}class E extends x{constructor(e,t,i,n){super(e,i),this.type="extent",this.elevationTiles=[],this._candidateTiles=[],this._fetchedCandidates=new Set,this.extent=t.intersection(e.fullExtent),this.maskExtents=n}selectTilesAtLOD(e,t){const i=this._maximumLodForRequests(t),n=Math.min(i,e);n<0?this._candidateTiles.length=0:this._selectCandidateTilesCoveringExtentAt(n)}_maximumLodForRequests(e){const{tileInfo:t,tilemapCache:i}=this.layer,n=I(t,i);if(!e)return n.length-1;const l=this.extent;if(null==l)return-1;for(let s=n.length-1;s>=0;s--){const i=n[s],o=i.resolution*t.size[0],a=i.resolution*t.size[1];if(Math.ceil(l.width/o)*Math.ceil(l.height/a)<=e)return s}return-1}allElevationTilesFetched(){return this._candidateTiles.length===this.elevationTiles.length}clearElevationTiles(){this.elevationTiles.length=0,this._fetchedCandidates.clear()}populateElevationTiles(e){for(const t of this._candidateTiles){const i=t.id&&e[t.id];i&&(this._fetchedCandidates.add(t),this.elevationTiles.push(i))}}remapTiles(e){this._candidateTiles=this._uniqueNonOverlappingTiles(this._candidateTiles.map((t=>e[t.id])))}getTilesToFetch(){return this._candidateTiles}forEachTileToFetch(e,t){const i=this._candidateTiles;this._candidateTiles=[],i.forEach((i=>{if(this._fetchedCandidates.has(i))return void(t&&t(i));let n=!1;e(i,(()=>n=!0)),n?t&&t(i):this._candidateTiles.push(i)})),this._candidateTiles=this._uniqueNonOverlappingTiles(this._candidateTiles,t)}_uniqueNonOverlappingTiles(e,t){const i={},n=[];for(const s of e){const e=s.id;e&&!i[e]?(i[e]=s,n.push(s)):t&&t(s)}const l=n.sort(((e,t)=>e.level-t.level));return l.filter(((e,i)=>{for(let n=0;n<i;n++){const i=l[n].extent;if(i&&e.extent&&(0,_geometry_support_aaBoundingRect_js__WEBPACK_IMPORTED_MODULE_9__.contains)(i,e.extent))return t&&t(e),!1}return!0}))}_selectCandidateTilesCoveringExtentAt(e){this._candidateTiles.length=0;const t=this.extent;if(null==t)return;const{tileInfo:i,tilemapCache:n}=this.layer,l=I(i,n)[e],s=i.tileAt(l.level,t.xmin,t.ymin),o=s.extent;if(null==o)return;const a=l.resolution*i.size[0],r=l.resolution*i.size[1],c=Math.ceil((t.xmax-o[0])/a),u=Math.ceil((t.ymax-o[1])/r);for(let h=0;h<u;h++)for(let e=0;e<c;e++){const t=new _TileKey_js__WEBPACK_IMPORTED_MODULE_12__.TileKey(null,s.level,s.row-h,s.col+e);i.updateTileInfo(t),this._tileIsMasked(t)||this._candidateTiles.push(t)}}_tileIsMasked(e){return!!this.maskExtents&&this.maskExtents.some((t=>e.extent&&(0,_geometry_support_aaBoundingRect_js__WEBPACK_IMPORTED_MODULE_9__.contains)(t,e.extent)))}}function R(e,t,i=0){const n=I(e,t);let l=n.length-1;if(i>0){const t=i/(0,_core_unitUtils_js__WEBPACK_IMPORTED_MODULE_4__.getMetersPerUnitForSR)(e.spatialReference),s=n.findIndex((e=>e.resolution<t));0===s?l=0:s>0&&(l=s-1)}return l}const q={maximumAutoTileRequests:20,noDataValue:0,returnSampleInfo:!1,demResolution:"auto",minDemResolution:0};function I(e,t){const i=e.lods;if(A(t)){const{effectiveMinLOD:e,effectiveMaxLOD:n}=t;return i.filter((t=>t.level>=e&&t.level<=n))}return i}function A(e){return null!=e?.tileInfo}


/***/ }),

/***/ "./node_modules/@arcgis/core/layers/support/ElevationSampler.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@arcgis/core/layers/support/ElevationSampler.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ElevationSamplerBase: () => (/* binding */ l),
/* harmony export */   MultiTileElevationSampler: () => (/* binding */ c),
/* harmony export */   TileElevationSampler: () => (/* binding */ m),
/* harmony export */   updateGeometryElevation: () => (/* binding */ u)
/* harmony export */ });
/* harmony import */ var _geometry_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../geometry.js */ "./node_modules/@arcgis/core/geometry.js");
/* harmony import */ var _core_has_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/has.js */ "./node_modules/@arcgis/core/core/has.js");
/* harmony import */ var _core_Logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/Logger.js */ "./node_modules/@arcgis/core/core/Logger.js");
/* harmony import */ var _core_unitUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/unitUtils.js */ "./node_modules/@arcgis/core/core/unitUtils.js");
/* harmony import */ var _geometry_support_aaBoundingRect_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../geometry/support/aaBoundingRect.js */ "./node_modules/@arcgis/core/geometry/support/aaBoundingRect.js");
/* harmony import */ var _geometry_support_webMercatorUtils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../geometry/support/webMercatorUtils.js */ "./node_modules/@arcgis/core/geometry/support/webMercatorUtils.js");
/* harmony import */ var _geometry_Point_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../geometry/Point.js */ "./node_modules/@arcgis/core/geometry/Point.js");
/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
const r=_core_Logger_js__WEBPACK_IMPORTED_MODULE_2__["default"].getLogger("esri.layers.support.ElevationSampler");class l{queryElevation(e){return u(e.clone(),this)}on(){return d}projectIfRequired(e,t){return p(e,t)}}class m extends l{get spatialReference(){return this.extent.spatialReference}constructor(e,s,i){super(),this.tile=e,this.noDataValue=i;const o=e.tile.extent;this.extent=(0,_geometry_support_aaBoundingRect_js__WEBPACK_IMPORTED_MODULE_4__.toExtent)(o,s.spatialReference),this.extent.zmin=e.zmin,this.extent.zmax=e.zmax,this._aaExtent=o;const a=(0,_core_unitUtils_js__WEBPACK_IMPORTED_MODULE_3__.getMetersPerUnitForSR)(s.spatialReference),r=s.lodAt(e.tile.level).resolution*a;this.demResolution={min:r,max:r}}contains(e){const t=this.projectIfRequired(e,this.spatialReference);return null!=t&&this.containsAt(t.x,t.y)}containsAt(e,t){return (0,_geometry_support_aaBoundingRect_js__WEBPACK_IMPORTED_MODULE_4__.containsXY)(this._aaExtent,e,t)}elevationAt(e,t){if(!this.containsAt(e,t)){const n=this.extent,s=`${n.xmin}, ${n.ymin}, ${n.xmax}, ${n.ymax}`;return r.warn("#elevationAt()",`Point used to sample elevation (${e}, ${t}) is outside of the sampler extent (${s})`),this.noDataValue}return this.tile.sample(e,t)??this.noDataValue}}class c extends l{get spatialReference(){return this.extent.spatialReference}constructor(e,t,s){let o;super(),"number"==typeof t?(this.noDataValue=t,o=null):(o=t,this.noDataValue=s),this.samplers=o?e.map((e=>new m(e,o,this.noDataValue))):e;const a=this.samplers[0];if(a){this.extent=a.extent.clone();const{min:e,max:t}=a.demResolution;this.demResolution={min:e,max:t};for(let n=1;n<this.samplers.length;n++){const e=this.samplers[n];this.extent.union(e.extent),this.demResolution.min=Math.min(this.demResolution.min,e.demResolution.min),this.demResolution.max=Math.max(this.demResolution.max,e.demResolution.max)}}else this.extent=(0,_geometry_support_aaBoundingRect_js__WEBPACK_IMPORTED_MODULE_4__.toExtent)((0,_geometry_support_aaBoundingRect_js__WEBPACK_IMPORTED_MODULE_4__.create)(),o.spatialReference),this.demResolution={min:0,max:0}}elevationAt(e,t){for(const n of this.samplers)if(n.containsAt(e,t))return n.elevationAt(e,t);return r.warn("#elevationAt()",`Point used to sample elevation (${e}, ${t}) is outside of the sampler`),this.noDataValue}}function u(e,t){const n=p(e,t.spatialReference);if(!n)return null;switch(e.type){case"point":h(e,n,t);break;case"polyline":f(e,n,t);break;case"multipoint":x(e,n,t)}return e}function p(e,t){if(null==e)return null;const n=e.spatialReference;if(n.equals(t))return e;const s=(0,_geometry_support_webMercatorUtils_js__WEBPACK_IMPORTED_MODULE_5__.project)(e,t);return s||r.error(`Cannot project geometry spatial reference (wkid:${n.wkid}) to elevation sampler spatial reference (wkid:${t.wkid})`),s}function h(e,t,n){e.z=n.elevationAt(t.x,t.y)}function f(e,t,n){R.spatialReference=t.spatialReference;const s=e.hasM&&!e.hasZ;for(let i=0;i<e.paths.length;i++){const o=e.paths[i],a=t.paths[i];for(let e=0;e<o.length;e++){const t=o[e],i=a[e];R.x=i[0],R.y=i[1],s&&(t[3]=t[2]),t[2]=n.elevationAt(R.x,R.y)}}e.hasZ=!0}function x(e,t,n){R.spatialReference=t.spatialReference;const s=e.hasM&&!e.hasZ;for(let i=0;i<e.points.length;i++){const o=e.points[i],a=t.points[i];R.x=a[0],R.y=a[1],s&&(o[3]=o[2]),o[2]=n.elevationAt(R.x,R.y)}e.hasZ=!0}const R=new _geometry_Point_js__WEBPACK_IMPORTED_MODULE_6__["default"],d={remove(){}};


/***/ }),

/***/ "./node_modules/@arcgis/core/layers/support/ElevationSamplerData.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@arcgis/core/layers/support/ElevationSamplerData.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ElevationSamplerData: () => (/* binding */ t)
/* harmony export */ });
/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
class t{constructor(t,h){this.data=t,this.safeWidth=.99999999*(t.width-1),this.dx=(t.width-1)/(h[2]-h[0]),this.dy=(t.width-1)/(h[3]-h[1]),this.x0=h[0],this.y1=h[3]}}


/***/ }),

/***/ "./node_modules/@arcgis/core/layers/support/ElevationTile.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@arcgis/core/layers/support/ElevationTile.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ElevationTile: () => (/* binding */ t)
/* harmony export */ });
/* harmony import */ var _ElevationSamplerData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ElevationSamplerData.js */ "./node_modules/@arcgis/core/layers/support/ElevationSamplerData.js");
/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
class t{constructor(t,l=null){if(this.tile=t,null!=l&&null!=t){const e=t.extent;this._samplerData=new _ElevationSamplerData_js__WEBPACK_IMPORTED_MODULE_0__.ElevationSamplerData(l,e)}}get zmin(){return null!=this._samplerData?this._samplerData.data.minValue:0}get zmax(){return null!=this._samplerData?this._samplerData.data.maxValue:0}sample(a,t){if(null==this._samplerData)return;const{safeWidth:e,data:r,dx:s,dy:n,y1:i,x0:u}=this._samplerData,{width:m,values:o,noDataValue:h}=r,p=l(n*(i-t),0,e),D=l(s*(a-u),0,e),f=Math.floor(p),c=Math.floor(D),d=f*m+c,_=d+m,x=o[d],V=o[_],g=o[d+1],v=o[_+1];if(x!==h&&V!==h&&g!==h&&v!==h){const a=D-c,t=x+(g-x)*a;return t+(V+(v-V)*a-t)*(p-f)}}}function l(a,t,l){return a<t?t:a>l?l:a}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,